<?xml version="1.0" encoding="utf-8" ?>
<nlog xmlns="http://www.nlog-project.org/schemas/NLog.xsd"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="http://www.nlog-project.org/schemas/NLog.xsd NLog.xsd"
      autoReload="true"
      throwExceptions="false"
      internalLogLevel="Off" internalLogFile="c:\temp\nlog-internal.log">
  <!-- throwExceptions="true" 如何设置为了true则Nlog的异常会中断程式
  <nlog throwExceptions="true" />- 设置throwExceptions属性为“true”可以让NLog不再阻挡这类异常，而是把它们抛给调用者。在部署是这样做可以帮我们快速定位问题。一旦应用程序已经正确配置了，我们建议把throwExceptions的值设为“false”，这样由于日志引发的问题不至于导致应用程序的崩溃。
<nlog internalLogFile="file.txt" />- 设置internalLogFile属性可以让NLog把内部的调试和异常信息都写入指定文件里。
<nlog internalLogLevel="Trace|Debug|Info|Warn|Error|Fatal" /> - 决定内部日志的级别，级别越高，输出的日志信息越简洁。
<nlog internalLogToConsole="false|true" /> - 是否把内部日志输出到标准控制台。
<nlog internalLogToConsoleError="false|true" /> - 是否把内部日志输出到标准错误控制台 (stderr)。
  -->

  <!--
 async="true" 数据异步输出
   -->
  <targets  async="true">

    <!-- optional, add some variables
  https://github.com/nlog/NLog/wiki/Configuration-file#variables
  -->
    <variable name="myvar" value="myvalue"/>
    
    
    
    <!--
    各参数细节
    ${logdate}:2017-08-27 12:00:45.9657
    ${shortdate}：2017-08-27
    ${level}：输出的等级Trace ,Debug Info ,Warn ,Error ,Fatal 
    ${level:uppercase=true}:表示大写 也可以写成  ${uppercase:${level}} 
    <default-target-parameters xsi:type="File" keepFileOpen="false"/> 这个是同意设置target的参数
    -->
    <!--<default-target-parameters xsi:type="File" keepFileOpen="false"/>-->
    <target xsi:type="Console" name="Console"   layout="${longdate} ${level} ${callsite} ${message} "/>

    <target xsi:type="File" name="File" fileName="${basedir}/logs/${shortdate}.log"
            layout="${longdate} ${level:uppercase=true}  ${callsite}  ${message}"/>

    <target xsi:type="File" name="File" fileName="${basedir}/logs/${shortdate}.log"
          layout="${longdate} ${level:uppercase=true}  ${callsite}  ${message}"/>

    <!--
        输入到数据库中
        
        脚本：
        
CREATE TABLE [dbo].[MyLog](
	[createDate] [varchar](100) NULL,
	[origin] [varchar](100) NULL,
	[logLevel] [varchar](200) NULL,
	[message] [varchar](200) NULL,
	[stackTrace] [varchar](200) NULL
) ON [PRIMARY]
    -->

    <target xsi:type="Database" name="database" connectionString="Server=.;Initial Catalog=TestDB;User ID=sa;Password=123456;" commandText="insert into MyLog ([CreateDate], [Origin], [LogLevel], [Message], [StackTrace]) values (@createDate, @origin, @logLevel, @message, @stackTrace)">
      <parameter name="@createDate" layout="${longdate}"/>
      <!--日志发生时间-->
      <parameter name="@origin" layout="${callsite}"/>
      <!--日志发生时间-->
      <parameter name="@logLevel" layout="${level}"/>
      <!--日志等级-->
      <parameter name="@message" layout="${message}"/>
      <!--日志信息-->
      <parameter name="@stackTrace" layout="${stacktrace}"/>
      <!--日志发生时间-->
    </target>

    <!--发送邮件  reference:https://github.com/nlog/NLog/wiki/Mail-target       -->
    <target xsi:type="Mail" name="InfoMail"
                   smtpServer="smtp.163.com"
                   smtpPort="25"
                   smtpAuthentication="Basic"
                   html="true"
                   encoding="utf-8"
                   smtpUserName="18013866920"
                   smtpPassword="zhang19920303"
                   enableSsl="true"
                   addNewLines="true"
                   from="18013866920@163.com"
                   to="1044193732@qq.com"
                   subject="主题"
                   header="您好："
                   body="这是一封NLog的测试邮件，${shortdate}${level} ${message} "
                   footer="********************"
                />

  </targets>

  <!--
https://github.com/nlog/NLog/wiki/Layout%20Renderers
1.name - 日志源/记录者的名字 (允许使用通配符*)
2.minlevel - 该规则所匹配日志范围的最低级别
3.maxlevel - 该规则所匹配日志范围的最高级别
4.level - 该规则所匹配的单一日志级别
5.levels - 该规则所匹配的一系列日志级别，由逗号分隔。
6.writeTo - 规则匹配时日志应该被写入的一系列目标，由逗号分隔。
7.final - 标记当前规则为最后一个规则。其后的规则即时匹配也不会被运行

4.<logger name="Name.Space.*" minlevel="Debug" maxlevel="Error" final="true" /> - 名字空间Name.Space下所有类的、级别在Debug和Error之间的(包括Debug,Info,Warn,Error) 日志信息都不会被记录(因为这条规则没有定义writeTo)，同时其它后续规则也都会被忽略(因为这里设置了final="true")。

-->
  <rules>
    <!--<logger name="*" minlevel="Debug" writeTo="Console"></logger>
    <logger name="NLogDemo.Program" minlevel="Debug" writeTo="Console"  final="true"></logger>-->
    <logger name="*" minlevel="Trace" writeTo="File"></logger>
    <!--<logger name="*" minlevel="Debug" writeTo="database"></logger>-->
    <!--<logger name="*"  minlevel="Debug" writeTo="InfoMail"/>-->
  </rules>


  
 

</nlog>
